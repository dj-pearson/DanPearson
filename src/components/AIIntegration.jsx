import { useState } from 'react'
import { motion } from 'framer-motion'
import toast from 'react-hot-toast'
import { Bot, Sparkles, Wand2, RefreshCw, Copy, Check } from 'lucide-react'

const AIIntegration = ({ onGenerate, type = 'content', currentContent = '', title = '' }) => {
  const [selectedModel, setSelectedModel] = useState('gpt-4')
  const [prompt, setPrompt] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedContent, setGeneratedContent] = useState('')
  const [copied, setCopied] = useState(false)
  
  const aiModels = [
    { id: 'gpt-4', name: 'GPT-4', provider: 'OpenAI', description: 'Most capable model for complex tasks' },
    { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', provider: 'OpenAI', description: 'Fast and efficient for most tasks' },
    { id: 'claude-3', name: 'Claude 3', provider: 'Anthropic', description: 'Excellent for analysis and writing' },
    { id: 'gemini-pro', name: 'Gemini Pro', provider: 'Google', description: 'Advanced reasoning and creativity' }
  ]
  
  const contentTemplates = {
    content: [
      'Write a comprehensive blog post about: {topic}',
      'Create an engaging article that explains: {topic}',
      'Write a detailed guide on: {topic}',
      'Create educational content about: {topic}'
    ],
    title: [
      'Generate 5 compelling blog post titles for: {topic}',
      'Create SEO-optimized titles for an article about: {topic}',
      'Suggest catchy headlines for: {topic}'
    ],
    seoTitle: [
      'Create an SEO-optimized title (60 chars max) for: {topic}',
      'Generate a search-friendly title for: {topic}'
    ],
    seoDescription: [
      'Write an SEO meta description (160 chars max) for: {topic}',
      'Create a compelling meta description for: {topic}'
    ],
    excerpt: [
      'Write a compelling excerpt for this blog post: {title}',
      'Create a brief summary for: {title}'
    ]
  }
  
  const simulateAIGeneration = async (model, prompt, type) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000))
    
    // Mock responses based on type and model
    const mockResponses = {
      content: {
        'gpt-4': `# ${title || 'AI-Generated Content'}\n\nThis is a comprehensive article generated by GPT-4. The content covers the key aspects of the topic with detailed explanations and practical insights.\n\n## Introduction\n\nArtificial Intelligence has revolutionized how we approach content creation and business automation. In this article, we'll explore the latest developments and practical applications.\n\n## Key Points\n\n- Advanced AI integration capabilities\n- Real-world business applications\n- Future trends and opportunities\n- Best practices for implementation\n\n## Conclusion\n\nThe integration of AI tools in modern workflows represents a significant opportunity for businesses to enhance productivity and innovation.`,
        'claude-3': `# ${title || 'AI-Generated Content'}\n\nThis thoughtful analysis by Claude 3 provides deep insights into the topic with careful consideration of various perspectives.\n\n## Overview\n\nThe landscape of AI technology continues to evolve rapidly, presenting both opportunities and challenges for businesses and individuals alike.\n\n## Analysis\n\n1. **Current State**: The technology has matured significantly\n2. **Applications**: Wide-ranging use cases across industries\n3. **Considerations**: Ethical and practical implications\n4. **Future Outlook**: Promising developments on the horizon\n\n## Recommendations\n\nBased on current trends and analysis, organizations should consider strategic AI adoption while maintaining focus on human-centered approaches.`,
        'gemini-pro': `# ${title || 'AI-Generated Content'}\n\nGenerated by Gemini Pro with creative reasoning and comprehensive coverage of the topic.\n\n## Creative Insights\n\nThe intersection of technology and human creativity opens new possibilities for innovation and problem-solving.\n\n## Technical Excellence\n\n- **Performance**: Optimized for real-world applications\n- **Scalability**: Designed for growth and adaptation\n- **Integration**: Seamless workflow incorporation\n- **Innovation**: Cutting-edge approaches and methodologies\n\n## Strategic Vision\n\nThe future of AI integration lies in thoughtful implementation that enhances human capabilities rather than replacing them.`
      },
      title: {
        'gpt-4': '1. "The Future of AI: Transforming Business Operations"\n2. "AI Integration: A Complete Guide for Modern Businesses"\n3. "Unlocking Productivity with Artificial Intelligence"\n4. "From Automation to Innovation: AI\'s Business Impact"\n5. "The Strategic Advantage of AI Implementation"',
        'claude-3': '1. "Thoughtful AI Integration: Balancing Innovation and Ethics"\n2. "The Human-AI Partnership: Redefining Workplace Dynamics"\n3. "AI-Driven Excellence: Sustainable Business Transformation"\n4. "Beyond Automation: AI as a Creative Catalyst"\n5. "Strategic AI Adoption: A Framework for Success"',
        'gemini-pro': '1. "AI Revolution: Reshaping Tomorrow\'s Business Landscape"\n2. "Creative AI Solutions: Where Technology Meets Innovation"\n3. "The Intelligent Enterprise: AI-Powered Growth Strategies"\n4. "Next-Gen AI: Transforming Ideas into Reality"\n5. "AI Excellence: Building the Future of Work"'
      },
      seoTitle: {
        'gpt-4': 'AI Business Integration Guide 2024 | Expert Tips & Strategies',
        'claude-3': 'AI Integration Best Practices | Ethical Business Transformation',
        'gemini-pro': 'AI Innovation Solutions | Transform Your Business Today'
      },
      seoDescription: {
        'gpt-4': 'Discover how AI integration can transform your business operations. Expert insights, practical strategies, and proven implementation methods for 2024.',
        'claude-3': 'Learn ethical AI integration strategies that balance innovation with responsibility. Comprehensive guide to sustainable business transformation.',
        'gemini-pro': 'Unlock AI\'s creative potential for your business. Innovative solutions, strategic insights, and practical implementation guidance from industry experts.'
      },
      excerpt: {
        'gpt-4': 'Explore the transformative power of AI integration in modern business operations. This comprehensive guide covers practical strategies, implementation best practices, and real-world applications that are reshaping industries worldwide.',
        'claude-3': 'A thoughtful examination of AI integration that balances technological advancement with ethical considerations, providing actionable insights for sustainable business transformation.',
        'gemini-pro': 'Discover innovative AI solutions that combine cutting-edge technology with creative problem-solving to unlock new possibilities for business growth and efficiency.'
      }
    }
    
    return mockResponses[type]?.[model] || 'Generated content would appear here based on your prompt and selected AI model.'
  }
  
  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast.error('Please enter a prompt')
      return
    }
    
    setIsGenerating(true)
    try {
      const content = await simulateAIGeneration(selectedModel, prompt, type)
      setGeneratedContent(content)
      toast.success(`Content generated successfully with ${aiModels.find(m => m.id === selectedModel)?.name}!`)
    } catch (error) {
      toast.error('Failed to generate content')
    } finally {
      setIsGenerating(false)
    }
  }
  
  const handleUseContent = () => {
    onGenerate(generatedContent)
    toast.success('Content applied successfully!')
  }
  
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(generatedContent)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
      toast.success('Content copied to clipboard!')
    } catch (error) {
      toast.error('Failed to copy content')
    }
  }
  
  const insertTemplate = (template) => {
    const topic = title || 'your topic'
    const filledTemplate = template.replace('{topic}', topic).replace('{title}', title)
    setPrompt(filledTemplate)
  }
  
  return (
    <motion.div
      initial={{ opacity: 0, height: 0 }}
      animate={{ opacity: 1, height: 'auto' }}
      className="bg-gray-800 rounded-xl p-6 border border-cyan-500/20 space-y-6"
    >
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-cyan-400 flex items-center gap-2">
          <Bot size={20} />
          AI Content Generator
        </h3>
        <div className="flex items-center gap-2 text-sm text-gray-400">
          <Sparkles size={16} className="text-cyan-400" />
          <span>Powered by AI</span>
        </div>
      </div>
      
      {/* Model Selection */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-3">
          Select AI Model
        </label>
        <div className="grid grid-cols-2 gap-3">
          {aiModels.map((model) => (
            <button
              key={model.id}
              onClick={() => setSelectedModel(model.id)}
              className={`p-3 rounded-lg border text-left transition-all duration-300 ${
                selectedModel === model.id
                  ? 'border-cyan-500 bg-cyan-500/10 text-cyan-400'
                  : 'border-gray-600 bg-gray-700 text-gray-300 hover:border-gray-500'
              }`}
            >
              <div className="font-medium">{model.name}</div>
              <div className="text-xs text-gray-400">{model.provider}</div>
              <div className="text-xs mt-1">{model.description}</div>
            </button>
          ))}
        </div>
      </div>
      
      {/* Quick Templates */}
      {contentTemplates[type] && (
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Quick Templates
          </label>
          <div className="flex flex-wrap gap-2">
            {contentTemplates[type].map((template, index) => (
              <button
                key={index}
                onClick={() => insertTemplate(template)}
                className="px-3 py-1 text-xs bg-gray-700 text-gray-300 rounded-full hover:bg-gray-600 transition-colors"
              >
                {template.split(':')[0]}...
              </button>
            ))}
          </div>
        </div>
      )}
      
      {/* Prompt Input */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          AI Prompt
        </label>
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder={`Enter your prompt for ${type} generation...`}
          rows={3}
          className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:border-cyan-500 focus:outline-none text-white resize-none"
        />
      </div>
      
      {/* Generate Button */}
      <button
        onClick={handleGenerate}
        disabled={isGenerating || !prompt.trim()}
        className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 py-3 rounded-lg font-semibold text-white hover:shadow-lg hover:shadow-cyan-500/25 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
      >
        {isGenerating ? (
          <>
            <RefreshCw size={18} className="animate-spin" />
            Generating with {aiModels.find(m => m.id === selectedModel)?.name}...
          </>
        ) : (
          <>
            <Wand2 size={18} />
            Generate Content
          </>
        )}
      </button>
      
      {/* Generated Content */}
      {generatedContent && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-4"
        >
          <div className="flex items-center justify-between">
            <h4 className="font-medium text-cyan-400">Generated Content</h4>
            <div className="flex items-center gap-2">
              <button
                onClick={handleCopy}
                className="p-2 text-gray-400 hover:text-cyan-400 transition-colors"
                title="Copy to clipboard"
              >
                {copied ? <Check size={16} /> : <Copy size={16} />}
              </button>
            </div>
          </div>
          
          <div className="bg-gray-700 rounded-lg p-4 max-h-64 overflow-y-auto">
            <pre className="text-sm text-gray-300 whitespace-pre-wrap font-mono">
              {generatedContent}
            </pre>
          </div>
          
          <div className="flex gap-3">
            <button
              onClick={handleUseContent}
              className="flex-1 bg-green-600 hover:bg-green-700 py-2 px-4 rounded-lg font-medium text-white transition-colors"
            >
              Use This Content
            </button>
            <button
              onClick={() => setGeneratedContent('')}
              className="px-4 py-2 border border-gray-600 text-gray-300 rounded-lg hover:bg-gray-700 transition-colors"
            >
              Clear
            </button>
          </div>
        </motion.div>
      )}
    </motion.div>
  )
}

export default AIIntegration